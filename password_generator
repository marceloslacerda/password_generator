#!/usr/bin/python3

"""Password Generator

Usage:
  password_generator get [--user=<usr>] [--url=<url>]
  password_generator set [--user=<usr>] [--url=<url>] [--length=<length>] [--symbols=<symbols>]
  password_generator list [--user=<usr>]
  password_generator rm [--user=<usr>] [--url=<url>]
"""

import getpass, tldextract, hashlib, os, binascii, os.path, collections, shelve
import pprint, itertools, docopt, logging, yesno

DEFAULT_LENGTH = 16
INFO_PATH = os.path.expanduser('~/.pinfo')
ALGO = 'sha256'
PASSES = 150000
DEFAULT_USER = os.environ['USER']

PassInfo = collections.namedtuple('PassInfo', ['salt', 'length', 'symbols', 'id'])
ALPHANUM = bytearray(itertools.chain(range(48, 58), range(65, 91),
                                range(97, 123)))

def translate(barray, length, symbols):
    table = ALPHANUM[:]
    table.extend(bytearray(symbols, 'utf-8'))
    pass_ = str(bytes(ALPHANUM[b % len(ALPHANUM)] for b in barray), 'utf-8')
    return pass_[:length - len(symbols)] + symbols

def gen_msg(hostname, pass_, usr):
    return bytearray(hostname + pass_ + usr, 'utf-8')

def get_pinfo_key(user, hostname):
    return hostname + user

def get_pinfo(db, user, hostname):
    try:
        return db[get_pinfo_key(user, hostname)]
    except KeyError:
        pass

def list_pinfo(user):
    db = get_db()
    for key in db:
        if user in key:
            print(key.split(user)[0])

def get_db():
    try:
        return shelve.open(INFO_PATH, writeback=True)
    except IOError:
        logging.error('Could not open the password info file. Please check your '
                      'permissions and try again.')
        exit(1)

def get_hostname(url):
    if not url:
        url = input('URL: ').strip()
    o = tldextract.extract(url)
    hostname = o.domain + '.' + o.suffix
    logging.info('Hostname, %s', hostname)
    return hostname

def get_password(user, hostname):
    pinfo = get_pinfo(get_db(), user, hostname)
    if pinfo is None:
        print('Password not found')
        return
    pass_ = getpass.getpass('Master key: ')
    msg = gen_msg(hostname, pass_, pinfo.id)
    dk = hashlib.pbkdf2_hmac(ALGO, msg, pinfo.salt, PASSES)
    print('Password: ', translate(dk, pinfo.length, pinfo.symbols))

def rm_pinfo(user, hostname):
    db = get_db()
    if get_pinfo(db, user, hostname):
        del db[get_pinfo_key(user, hostname)]
        logging.info('Removed password successfully')
    else:
        logging.error('No entry for user %s, hostname %s found.', user, hostname)
        exit(1)


def set_password(user, hostname, length, symbols):
    db = get_db()
    pinfo = get_pinfo(get_db(), user, hostname)
    if pinfo:
        if not yesno.input_until_bool('Password already exists, do you wish to continue'):
            exit(0)
    pass_ = getpass.getpass('Master key: ')
    msg = gen_msg(hostname, pass_, user)
    salt = os.urandom(32)
    dk = hashlib.pbkdf2_hmac(ALGO, msg, salt, PASSES)
    print('Password: ', translate(dk, length, symbols))
    if yesno.input_until_bool('Save password info'):
        db[hostname + user] = PassInfo(salt, length, symbols, user)

def get_length(length):
    return DEFAULT_LENGTH if not length else int(length)

def get_symbols(symbols):
    return '' if not symbols else symbols

if __name__ == '__main__':
    arguments = docopt.docopt(__doc__, version='Password Generator 0.0.0')
    logging.basicConfig(format='%(levelname)s: %(message)s', level='INFO')
    if arguments['--user']:
        user = arguments['--user']
    else:
        user = DEFAULT_USER
    logging.info('User, %s', user)

    if arguments['list']:
        list_pinfo(user)
    elif arguments['get']:
        get_password(user, get_hostname(arguments['--url']))
    elif arguments['set']:
        set_password(user, get_hostname(arguments['--url']),
                     get_length(arguments['--length']),
                     get_symbols(arguments['--symbols']))
    elif arguments['rm']:
        rm_pinfo(user, get_hostname(arguments['--url']))
